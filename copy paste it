In the first cell, paste and execute the code for installing the required packages:

python
Copy code
!pip install tensorflow==2.3.1 nltk==3.5 colorama==0.4.3 numpy==1.18.5 scikit_learn==0.23.2 Flask==1.1.2
b. In the second cell, paste and execute the code for defining the intentions:

python
Copy code
import json

intents = {
    "intents": [
        {"tag": "greeting", "patterns": ["Hi", "Hey", "Is anyone there?", "Hello", "Hay"], "responses": ["Hello", "Hi", "Hi there"]},
        {"tag": "goodbye", "patterns": ["Bye", "See you later", "Goodbye"], "responses": ["See you later", "Have a nice day", "Bye! Come back again"]},
        {"tag": "thanks", "patterns": ["Thanks", "Thank you", "That's helpful", "Thanks for the help"], "responses": ["Happy to help!", "Any time!", "My pleasure", "You're most welcome!"]},
        {"tag": "about", "patterns": ["Who are you?", "What are you?", "Who you are?"], "responses": ["I'm Joana, your bot assistant", "I'm Joana, an Artificial Intelligent bot"]},
        {"tag": "name", "patterns": ["what is your name", "what should I call you", "whats your name?"], "responses": ["You can call me Joana.", "I'm Joana!", "Just call me as Joana"]},
        {"tag": "help", "patterns": ["Could you help me?", "give me a hand please", "Can you help?", "What can you do for me?", "I need a support", "I need a help", "support me please"], "responses": ["Tell me how can assist you", "Tell me your problem to assist you", "Yes Sure, How can I support you"]},
        {"tag": "createaccount", "patterns": ["I need to create a new account", "how to open a new account", "I want to create an account", "can you create an account for me", "how to open a new account"], "responses": ["You can just easily create a new account from our web site", "Just go to our web site and follow the guidelines to create a new account"]},
        {"tag": "complaint", "patterns": ["have a complaint", "I want to raise a complaint", "there is a complaint about a service"], "responses": ["Please provide us your complaint in order to assist you", "Please mention your complaint, we will reach you and sorry for any inconvenience caused"]}
    ]
}

with open('intents.json', 'w') as file:
    json.dump(intents, file)
c. In the third cell, paste and execute the code for data preparation:

python
Copy code
import json
import numpy as np
from tensorflow import keras
from sklearn.preprocessing import LabelEncoder

with open('intents.json') as file:
    data = json.load(file)

training_sentences = []
training_labels = []
labels = []
responses = []

for intent in data['intents']:
    for pattern in intent['patterns']:
        training_sentences.append(pattern)
        training_labels.append(intent['tag'])
    responses.append(intent['responses'])

    if intent['tag'] not in labels:
        labels.append(intent['tag'])

num_classes = len(labels)

lbl_encoder = LabelEncoder()
lbl_encoder.fit(training_labels)
training_labels = lbl_encoder.transform(training_labels)
d. In the fourth cell, paste and execute the code for tokenization:

python
Copy code
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences

vocab_size = 1000
embedding_dim = 16
max_len = 20
oov_token = "<OOV>"

tokenizer = Tokenizer(num_words=vocab_size, oov_token=oov_token)
tokenizer.fit_on_texts(training_sentences)
word_index = tokenizer.word_index
sequences = tokenizer.texts_to_sequences(training_sentences)
padded_sequences = pad_sequences(sequences, truncating='post', maxlen=max_len)
e. In the fifth cell, paste and execute the code for training the neural network:

python
Copy code
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Embedding, GlobalAveragePooling1D

model = Sequential()
model.add(Embedding(vocab_size, embedding_dim, input_length=max_len))
model.add(GlobalAveragePooling1D())
model.add(Dense(16, activation='relu'))
model.add(Dense(16, activation='relu'))
model.add(Dense(num_classes, activation='softmax'))

model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

epochs = 500
history = model.fit(padded_sequences, np.array(training_labels), epochs=epochs)
f. In the sixth cell, paste and execute the code for saving the trained model, tokenizer, and label encoder:

python
Copy code
model.save("chat_model")

import pickle

with open('tokenizer.pickle', 'wb') as handle:
    pickle.dump(tokenizer, handle, protocol=pickle.HIGHEST_PROTOCOL)

with open('label_encoder.pickle', 'wb') as enc_file:
    pickle.dump(lbl_encoder, enc_file, protocol=pickle.HIGHEST_PROTOCOL)
g. In the seventh cell, paste and execute the code for building and interacting with the chatbot:

python
Copy code
import json
import numpy as np
from tensorflow import keras
from sklearn.preprocessing import LabelEncoder
import colorama
colorama.init()
from colorama import Fore, Style

import random
import pickle

with open("intents.json") as file:
    data = json.load(file)


def chat():
    model = keras.models.load_model('chat_model')
    with open('tokenizer.pickle', 'rb') as handle:
        tokenizer = pickle.load(handle)
    with open('label_encoder.pickle', 'rb') as enc:
        lbl_encoder = pickle.load(enc)
    max_len = 20
    
    while True:
        print(Fore.LIGHTBLUE_EX + "User: " + Style.RESET_ALL, end="")
        inp = input()
        if inp.lower() == "quit":
            break

        result = model.predict(keras.preprocessing.sequence.pad_sequences(tokenizer.texts_to_sequences([inp]),
                                             truncating='post', maxlen=max_len))
        tag = lbl_encoder.inverse_transform([np.argmax(result)])

        for i in data['intents']:
            if i['tag'] == tag:
                print(Fore.GREEN + "ChatBot:" + Style.RESET_ALL, np.random.choice(i['responses']))

        if tag == 'goodbye':
            break


chat()
Execute the code: Once you have pasted all the code snippets into separate cells, execute each cell one by one by pressing "Shift + Enter" or clicking the "Run" button. Make sure the cells are executed in the correct order to avoid any errors.

Interact with the chatbot: After executing all the cells, you can interact with the chatbot. The chatbot will prompt you with "User:" and you can enter your message. To stop the conversation, type "quit" and press enter.

This will allow you to create and interact with the chatbot in Jupyter Notebook.
